# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- branch1

pool:
  vmImage: ubuntu-latest

stages:
  - stage: build
    jobs:
      - job: building
        steps:
        
        - task: TerraformTaskV4@4
          displayName: tf-init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/mo-ap/tf-infra'
            backendAzureRmUseEnvironmentVariablesForAuthentication: false
            backendAzureRmUseEntraIdForAuthentication: false
            backendServiceArm: 'tf-service-connection'
            backendAzureRmResourceGroupName: 'backend-rg'
            backendAzureRmStorageAccountName: 'tfbackendgglearn'
            backendAzureRmContainerName: 'tf-backend'
            backendAzureRmKey: 'backend.tfstate'

        - task: TerraformTaskV4@4
          displayName: tf-plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            commandOptions: '-out tfplan.out'
            workingDirectory: '$(System.DefaultWorkingDirectory)/mo-ap/tf-infra'
            environmentServiceNameAzureRM: 'tf-service-connection'

        - task: CmdLine@2
          displayName: convert-to-JSON
          inputs:
            script: 'terraform show -json $(System.DefaultWorkingDirectory)/mo-ap/tf-infra/tfplan.out | jq . > $(System.DefaultWorkingDirectory)/mo-ap/tf-infra/tfplan.json'
            workingDirectory: '$(System.DefaultWorkingDirectory)/mo-ap/tf-infra/'
        - task: PublishBuildArtifacts@1
          displayName: publish-plan-as-JSON
          inputs:
            PathtoPublish: '$(System.DefaultWorkingDirectory)/mo-ap/tf-infra/tfplan.json'
            ArtifactName: 'drop'
            publishLocation: 'Container'
